theme(axis.text.x = element_text(angle=45, hjust=1)) +
geom_bar(stat = "identity") +
ggtitle("Household Income versus Health Insurance Coverage") +
xlab("Household Income") +
ylab("Percent not currently coveraged")
# comparing income to poverty ratio with Health Insurance Coverage
health_insurance_poverty %>%
filter(group == "Income-to-Poverty Ratio") %>%
select(characteristics, percent_not_currently_covered) %>%
ggplot(aes(x = reorder(characteristics, -percent_not_currently_covered),
y = percent_not_currently_covered)) +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
geom_bar(stat = "identity") +
ggtitle("Income-to-Poverty versus Health Insurance Coverage") +
xlab("Income-to-Poverty Ratio") +
ylab("Percent not currently coveraged")
# it looks like there is a relationship between poverty rate
# and PM 2.5 levels in SF neighborhoods! Now need to check that it is
# a significant relationship. Will use a linear model to do this
results_from_pm_tree_lm <- summary(lm(PM_Conc ~ Pov_Per,
data = resiliency_data))
knitr::kable(broom::tidy(results_from_pm_tree_lm), digits = 4)
# it looks like there is a relationship between percent tree cover
# and PM 2.5 levels in SF neighborhoods! Now need to check that it is
# a significant relationship. Will use a linear model to do this
results_from_pm_tree_lm <- summary(lm(PM_Conc ~ Tree_Per,
data = resiliency_data))
knitr::kable(broom::tidy(results_from_pm_tree_lm), digits = 4)
# it looks like there is a relationship between poverty rate
# and graduating high school in SF neighborhoods! Now need to check that it is
# a significant relationship. Will use a linear model to do this
results_from_pm_tree_lm <- summary(lm(HS_Per ~ Pov_Per,
data = resiliency_data))
knitr::kable(broom::tidy(results_from_pm_tree_lm), digits = 4)
# show a table of the educational attainment of everyone in the US
# compared to poverty
characteristic_poverty %>%
filter(groups == "Educational Attainment") %>%
select(characteristics, `2017_total`, `2017_number_below_poverty`,
`2017_percent_below_poverty`, `2018_total`,
`2018_number_below_poverty`, `2018_percent_below_poverty`) %>%
kable(col.names = c("Characteristics", "Total in 2017",
"Number Below Poverty in 2017",
"Percent Below Poverty in 2017",
"Total in 2018",
"Number Below Poverty in 2018",
"Percent Below Poverty in 2018"))
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
lintr::lint(filename = "Final_Report.Rmd")
lintr::lint(filename = "Final_Report.Rmd")
lintr::lint(filename = "Final_Report.Rmd")
lintr::lint(filename = "Final_Report.Rmd")
# Set up
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
error = FALSE,
warning = FALSE)
# read in the neighborhood resilience dataset from a csv file
# [@datasf2015community]
# resiliency data ~~ https://data.sfgov.org/Health-and-Social-Services/
# data continued~~ Community-Resiliency-Indicator-System/banc-xdvr
resiliency_data <- read_csv(
"data/raw_data/Community_Resiliency_Indicator_System.csv")
# Set up
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
error = FALSE,
warning = FALSE)
# Load libraries
library("dplyr")
library("tidyr")
library("ggplot2")
library("readr")
library("citr")
library("broom")
library("knitr")
# read in the neighborhood resilience dataset from a csv file
# [@datasf2015community]
# resiliency data ~~ https://data.sfgov.org/Health-and-Social-Services/
# data continued~~ Community-Resiliency-Indicator-System/banc-xdvr
resiliency_data <- read_csv(
"data/raw_data/Community_Resiliency_Indicator_System.csv")
# read in the people in poverty by select characteristics from csv file
# [@censusbureau2018people]
# characteristics of poverty ~~ https://www.census.gov/data/tables/2019/demo/
# income-poverty/p60-266.html
characteristic_poverty <- read_csv(
"data/raw_data/People_In_Poverty_By_Select_Characteristics.csv")
# read in health insurance coverage by select characteristics from csv file
# [@censusbureau2018health]
# health insurance ~~ https://www.census.gov/data/tables/time-series/demo/
# insurance continued ~~ income-poverty/cps-hi/hi.html
health_insurance_poverty <- read_csv(paste0("data/raw_data/Health_Insurance_",
"Current_Coverage_Status_and_Type_of_Coverage_by_Selected_",
"Characteristics_2019.csv"))
lintr::lint(filename = "Final_Report.Rmd")
lintr::lint(filename = "Final_Report.Rmd")
lintr::lint(filename = "Final_Report.Rmd")
# read in the neighborhood resilience dataset from a csv file
# [@datasf2015community]
# resiliency data ~~ https://data.sfgov.org/Health-and-Social-Services/
# data continued~~ Community-Resiliency-Indicator-System/banc-xdvr
resiliency_data <- read_csv(
"data/raw_data/Community_Resiliency_Indicator_System.csv")
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
data(diamonds)
head(iris)
head(diamonds)
data("diamonds")
view(diamonds)
?diamonds
# try to make Exercise 1
?diamonds
View(diamonds)
library(ggplot2)
library(dplyr)
# try to make Exercise 1
?diamonds
View(diamonds)
# load the diamonds dataset
data(diamonds)
force(diamonds)
# try to make Exercise 1
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point(size = 3, aes(shape = color))
data(diamonds)
# try to make Exercise 1
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point(size = 3, aes(shape = color))
# try to make Exercise 1
ggplot(data = diamonds, aes(x = carat, y = price, color = color)) +
geom_point(size = 3)
# try to make Exercise 1
ggplot(data = diamonds, aes(x = carat, y = price, color = color)) +
geom_point(size = 1)
# try to make Exercise 1
ggplot(data = diamonds, aes(x = carat, y = price, color = color)) +
geom_point()
# try to make Exercise 3
ggplot(data = diamonds, aes(x = clarity, color = cut))
# try to make Exercise 3
ggplot(data = diamonds, aes(x = clarity, color = cut)) +
geom_col()
# try to make Exercise 3
ggplot(data = diamonds, aes(x = clarity, y = count, color = cut)) +
geom_col()
# try to make Exercise 3
ggplot(data = diamonds, aes(x = clarity, color = cut)) +
geom_col(stat = count)
# try to make Exercise 3
ggplot(data = diamonds, aes(x = clarity, color = cut)) +
geom_col()
# try to make Exercise 3
ggplot(data = diamonds, aes(clarity, color = cut)) +
geom_col()
# try to make Exercise 3
ggplot(data = diamonds, aes(clarity)) +
geom_col()
# try to make Exercise 3
ggplot(diamonds, aes(clarity)) +
geom_bar()
# try to make Exercise 3
ggplot(diamonds, aes(clarity, color = cut)) +
geom_bar()
# try to make Exercise 3
ggplot(diamonds, aes(clarity, color = cut)) +
geom_bar(position = "dodge")
# try to make Exercise 3
ggplot(diamonds, aes(clarity, fill = cut)) +
geom_bar(position = "dodge")
# try to make Exercise 4
diamonds_agg <- diamonds %>%
group_by(clarity) %>%
summarise(mean_fair = mean(Fair),
sd_fair = sd(Fair))
View(diamonds)
diamonds_agg <- diamonds %>%
group_by(clarity)
# try to make Exercise 4
diamonds_agg <- diamonds %>%
group_by(clarity, cut) %>%
summarise(mean_fair = mean(Fair),
sd_fair = sd(Fair))
diamonds_agg <- diamonds %>%
group_by(clarity, cut)
# try to make Exercise 4
iris_agg <- iris %>%
group_by(Species) %>%
summarise(mean_petal_len = mean(Petal.Length),
sd_petal_len = sd(Petal.Length))
# try to make Exercise 4
iris_agg <- iris %>%
group_by(Species) %>%
summarise(mean_petal_len = mean(Petal.Length),
sd_petal_len = sd(Petal.Length)) +
geom_errorbar()
# try to make Exercise 4
iris_agg <- iris %>%
group_by(Species) %>%
summarise(mean_petal_len = mean(Petal.Length),
sd_petal_len = sd(Petal.Length)) %>%
geom_errorbar()
# try to make Exercise 4
iris_agg <- iris %>%
group_by(Species) %>%
summarise(mean_petal_len = mean(Petal.Length),
sd_petal_len = sd(Petal.Length)) %>%
geom_errorbar(aes(x = Species, y = mean_petal_len))
# try to make Exercise 4
iris_agg <- iris %>%
group_by(Species) %>%
summarise(mean_petal_len = mean(Petal.Length),
sd_petal_len = sd(Petal.Length)) %>%
geom_point(aes(x = Species, y = mean_petal_len)) %>%
geom_bar(stat = "identity")
# try to make Exercise 4
iris_agg <- iris %>%
group_by(Species) %>%
summarise(mean_petal_len = mean(Petal.Length),
sd_petal_len = sd(Petal.Length)) %>%
geom_point(aes(x = Species, y = mean_petal_len)) %>%
geom_bar()
# try to make Exercise 4
iris_agg <- iris %>%
group_by(Species) %>%
summarise(mean_petal_len = mean(Petal.Length),
sd_petal_len = sd(Petal.Length)) %>%
geom_point(aes(x = Species, y = mean_petal_len), stat = "identity") %>%
geom_bar()
geom_point(stat = "identity"
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) %>%
geom_point(stat = "identity") %>%
geom_bar()
ggplot(iris_agg, aes(x = Species, y = mean_petal_len))
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) %>%
geom_point(stat = "identity")
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_bar()
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity")
ggplot(iris_agg, aes(x = Species, y = mean_petal_len, fill = Species)) +
geom_point(stat = "identity") +
geom_bar()
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_bar()
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity")
ggplot(iris_agg, aes(x = Species, y = mean_petal_len, fill = Species)) +
geom_point(stat = "identity")
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_errorbarbar(stat = "identity")
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_errorbar(stat = "identity")
stat = "identity")
stat = ("identity")
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_errorbar(aes(ymin = mean_petal_len - sd_petal_len,
ymax = mean_petal_len + sd_petal_len,
stat = "identity"))
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_errorbar(aes(ymin = mean_petal_len - sd_petal_len,
ymax = mean_petal_len + sd_petal_len,
stat = "identity"),
ylab = "Mean Petal Length")
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_errorbar(aes(ymin = mean_petal_len - sd_petal_len,
ymax = mean_petal_len + sd_petal_len),
ylab = "Mean Petal Length")
ymax = mean_petal_len + sd_petal_len)
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_errorbar(aes(ymin = mean_petal_len - sd_petal_len,
ymax = mean_petal_len + sd_petal_len))
# set API key
census_api_key("d2583e87392bce707f5d54ca5c2b415d9b5ca4f8")
install.packages("tidycensus")
# load packages
library("tidycensus")
library("tidyverse")
# set the caching for download data
options(tigris_use_cache = TRUE)
# set API key
census_api_key("d2583e87392bce707f5d54ca5c2b415d9b5ca4f8")
# set API key
census_api_key("d2583e87392bce707f5d54ca5c2b415d9b5ca4f8", install = TRUE)
# load packages
library("tidycensus")
library("tidyverse")
# set the caching for download data
options(tigris_use_cache = TRUE)
# set API key
census_api_key("d2583e87392bce707f5d54ca5c2b415d9b5ca4f8", install = TRUE)
# download the census-tract-scale median income
# data for the county of San Francisco
sf_median_income <- get_acs(geography = "tract",
variables = c(med_income = "B19013_001"),
state = "CA",
county = "San Francisco",
geometry = TRUE,
year = 2018)
sf_median_income
# make a map!
sf_median_income %>%
ggplot(aes(fill = estimate)) +
geom_sf(color = NA) +
scale_fill_viridis_c()
# filter random islands out
sf_median_income %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") ^>^
ggplot(aes(fill = estimate)) +
geom_sf(color = NA) +
scale_fill_viridis_c()
# filter random islands out
sf_median_income %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
ggplot(aes(fill = estimate)) +
geom_sf(color = NA) +
scale_fill_viridis_c()
# filter random islands out
sf_median_income %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
ggplot(aes(fill = estimate)) +
geom_sf(color = NA) +
scale_fill_viridis_c() +
ggtitle("Median 2018 Income by Census Tract in San Francisco") +
labs(x = "Longitude",
y = "Lattitude")
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_errorbar(aes(ymin = mean_petal_len - sd_petal_len,
ymax = mean_petal_len + sd_petal_len)) +
labs(y = )
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_errorbar(aes(ymin = mean_petal_len - sd_petal_len,
ymax = mean_petal_len + sd_petal_len))
# load packages
library(ggplot2)
library(dplyr)
# load the diamonds dataset
data(diamonds)
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_errorbar(aes(ymin = mean_petal_len - sd_petal_len,
ymax = mean_petal_len + sd_petal_len))
# try to make Exercise 4
iris_agg <- iris %>%
group_by(Species) %>%
summarise(mean_petal_len = mean(Petal.Length),
sd_petal_len = sd(Petal.Length))
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_errorbar(aes(ymin = mean_petal_len - sd_petal_len,
ymax = mean_petal_len + sd_petal_len))
ggplot(iris_agg, aes(x = Species, y = mean_petal_len)) +
geom_point(stat = "identity") +
geom_errorbar(aes(ymin = mean_petal_len - sd_petal_len,
ymax = mean_petal_len + sd_petal_len)) +
labs(y = "Mean Petal Length")
racevars <- c(White  = "P005003",
Black = "P005004",
Asian = "P005006",
Hispanic = "P004003")
sf_race <- get_decennial(geography = "tract",
variables = racevars,
state = "CA",
county = "San Francisco",
summary_var = "P001001")
# make a faceted set of plot for each racial category
sf_race %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
mutate(percent = 100 * (value / summary_value)) %>%
ggplot(aes(fill = percent)) %>%
facet_wrap(~ variable)
# make a faceted set of plot for each racial category
sf_race %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
mutate(percent = 100 * (value / summary_value)) %>%
ggplot(aes(fill = percent)) %>%
facet_wrap(~ variable) +
geom_sf(color = NA) %>%
scale_fill_viridis_c()
# make a faceted set of plot for each racial category
sf_race %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
mutate(percent = 100 * (value / summary_value)) %>%
ggplot(aes(fill = percent)) %>%
facet_wrap(~ variable) +
geom_sf(color = NA) +
scale_fill_viridis_c()
sf_race <- get_decennial(geography = "tract",
variables = racevars,
state = "CA",
county = "San Francisco",
geometry = TRUE,
summary_var = "P001001") # total population?
# take a look at the data
sf_race
# make a faceted set of plot for each racial category
sf_race %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
mutate(percent = 100 * (value / summary_value)) %>%
ggplot(aes(fill = percent)) %>%
facet_wrap(~ variable) +
geom_sf(color = NA) +
scale_fill_viridis_c()
sf_race <- get_decennial(geography = "tract",
variables = racevars,
state = "CA",
county = "San Francisco",
geometry = TRUE,
summary_var = "P001001") # total population?
# take a look at the data
sf_race
# make a faceted set of plot for each racial category
sf_race %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
mutate(percent = 100 * (value / summary_value)) %>%
ggplot(aes(fill = percent)) %>%
facet_wrap(~ variable) +
geom_sf(color = NA) +
scale_fill_viridis_c()
# load packages
library("tidycensus")
library("tidyverse")
# set the caching for download data
options(tigris_use_cache = TRUE)
# set API key
census_api_key("d2583e87392bce707f5d54ca5c2b415d9b5ca4f8", install = TRUE)
# download the census-tract-scale median income
# data for the county of San Francisco
sf_median_income <- get_acs(geography = "tract",
variables = c(med_income = "B19013_001"),
state = "CA",
county = "San Francisco",
geometry = TRUE,
year = 2018)
# take a look at the data
sf_median_income
# make a map!
sf_median_income %>%
ggplot(aes(fill = estimate)) +
geom_sf(color = NA) +
scale_fill_viridis_c()
racevars <- c(White  = "P005003",
Black = "P005004",
Asian = "P005006",
Hispanic = "P004003")
sf_race <- get_decennial(geography = "tract",
variables = racevars,
state = "CA",
county = "San Francisco",
geometry = TRUE,
summary_var = "P001001") # total population?
# take a look at the data
sf_race
# make a faceted set of plot for each racial category
sf_race %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
mutate(percent = 100 * (value / summary_value)) %>%
ggplot(aes(fill = percent)) %>%
facet_wrap(~ variable) +
geom_sf(color = NA) +
scale_fill_viridis_c()
# take a look at the data
sf_race
# make a faceted set of plot for each racial category
sf_race %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
mutate(percent = 100 * (value / summary_value)) %>%
ggplot(aes(fill = percent)) %>%
facet_wrap(~ variable) +
geom_sf(color = NA) +
scale_fill_viridis_c()
# make a faceted set of plot for each racial category
sf_race %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
mutate(percent = 100 * (value / summary_value)) %>%
ggplot(aes(fill = percent)) %>%
facet_wrap(~ variable) +
geom_sf(color = NA) +
scale_fill_viridis_c()
sf_race %>%
filter(GEOID != "06075980401" & GEOID != "06075017902")
sf_race %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
mutate(percent = 100 * (value / summary_value))
sf_race %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
mutate(percent = 100 * (value / summary_value)) %>%
ggplot(aes(fill = percent))
# make a faceted set of plot for each racial category
sf_race %>%
filter(GEOID != "06075980401" & GEOID != "06075017902") %>%
mutate(percent = 100 * (value / summary_value)) %>%
ggplot(aes(fill = percent)) +
facet_wrap(~ variable) +
geom_sf(color = NA) +
scale_fill_viridis_c()
